"""
Vers√£o melhorada do criar_briefing_noticias.py
==============================================

Melhorias implementadas:
- Uso de vari√°veis de ambiente (.env)
- Logging estruturado
- Tratamento de erros espec√≠fico
- Type hints completos
- Valida√ß√µes robustas
"""

import google.generativeai as genai
from google.generativeai import types
from pydantic import BaseModel, Field
from typing import List, Optional
import pathlib
import os
import logging
from dotenv import load_dotenv

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# --- Configura√ß√£o da API Key via Vari√°vel de Ambiente ---
load_dotenv()

api_key = os.getenv('GOOGLE_API_KEY')
if not api_key:
    logger.error("GOOGLE_API_KEY n√£o encontrada nas vari√°veis de ambiente")
    logger.info("Crie um arquivo .env com: GOOGLE_API_KEY=sua-chave-aqui")
    logger.info("Ou obtenha uma chave em: https://aistudio.google.com/app/apikey")
    raise ValueError("API Key n√£o configurada. Configure a vari√°vel de ambiente GOOGLE_API_KEY")

try:
    genai.configure(api_key=api_key)
    logger.info("API Key configurada com sucesso")
except Exception as e:
    logger.error(f"Erro na configura√ß√£o da API Key: {e}")
    raise

# --- ETAPA 1: Defini√ß√£o da Estrutura de Dados com Pydantic ---

class ArtigoEncontrado(BaseModel):
    """
    Define a estrutura de um √∫nico artigo de not√≠cia encontrado na web.
    
    Attributes:
        titulo: O t√≠tulo exato da mat√©ria
        fonte: O nome do ve√≠culo de comunica√ß√£o (ex: 'Reuters', 'G1')
        resumo_curto: Um resumo de uma a duas frases sobre a not√≠cia
    """
    titulo: str = Field(description="O t√≠tulo exato da mat√©ria.")
    fonte: str = Field(description="O nome do ve√≠culo de comunica√ß√£o (ex: 'Reuters', 'G1', 'The Verge').")
    resumo_curto: str = Field(description="Um resumo de uma a duas frases sobre o ponto principal da not√≠cia.")


class BriefingDeNoticias(BaseModel):
    """
    Define a estrutura completa do briefing que queremos receber.
    
    Attributes:
        topico_central: O tema principal que une todas as not√≠cias
        artigos: Lista de 3 a 5 artigos relevantes encontrados
        analise_sintetizada: An√°lise aprofundada em 2 par√°grafos
        prompt_para_imagem: Prompt descritivo para gera√ß√£o de imagem
    """
    topico_central: str = Field(description="O tema principal que une todas as not√≠cias encontradas.")
    artigos: List[ArtigoEncontrado] = Field(description="Uma lista contendo de 3 a 5 artigos relevantes encontrados.")
    analise_sintetizada: str = Field(
        description="Uma an√°lise aprofundada de 2 par√°grafos. O primeiro par√°grafo deve resumir os fatos principais. O segundo deve explorar as implica√ß√µes ou o contexto mais amplo do t√≥pico."
    )
    prompt_para_imagem: str = Field(
        description="Crie um prompt de texto descritivo e art√≠stico para um modelo de gera√ß√£o de imagem (como Imagen ou Midjourney) que capture visualmente a ess√™ncia da 'analise_sintetizada'. O prompt deve ser em ingl√™s."
    )


# --- Configura√ß√£o do modelo ---
# A API n√£o requer inicializa√ß√£o de cliente, apenas configura√ß√£o
logger.info("API Gemini configurada e pronta para uso")


def criar_briefing_avancado(topico: str) -> Optional[BriefingDeNoticias]:
    """
    Fun√ß√£o principal que busca not√≠cias, as estrutura, analisa e cria um prompt de imagem.
    
    Args:
        topico: O tema a ser pesquisado (ex: "IA na sa√∫de")
    
    Returns:
        BriefingDeNoticias: Objeto com artigos, an√°lise e prompt de imagem
        None: Se houver erro na gera√ß√£o
    
    Raises:
        ValueError: Se o t√≥pico for vazio ou inv√°lido
    
    Example:
        >>> briefing = criar_briefing_avancado("carros el√©tricos")
        >>> print(briefing.topico_central)
        'Carros El√©tricos'
    """
    if not topico or not topico.strip():
        logger.error("T√≥pico vazio fornecido")
        raise ValueError("O t√≥pico n√£o pode estar vazio")
    
    logger.info(f"Iniciando cria√ß√£o do briefing para: '{topico}'")
    
    # --- ETAPA 2: Buscar, Estruturar e Analisar em uma √∫nica chamada ---
    prompt_principal = f"""
    Atue como um analista de not√≠cias s√™nior. Sua tarefa √© criar um briefing completo sobre o t√≥pico: '{topico}'.
    
    IMPORTANTE: Retorne sua resposta em formato JSON v√°lido com a seguinte estrutura exata:
    {{
        "topico_central": "string - o tema principal",
        "artigos": [
            {{
                "titulo": "string - t√≠tulo da mat√©ria",
                "fonte": "string - nome do ve√≠culo",
                "resumo_curto": "string - resumo de 1-2 frases"
            }}
        ],
        "analise_sintetizada": "string - an√°lise de 2 par√°grafos",
        "prompt_para_imagem": "string - prompt em ingl√™s para gera√ß√£o de imagem"
    }}
    
    1. Baseie-se em seu conhecimento para encontrar 3 a 5 artigos relevantes e recentes sobre o t√≥pico.
    2. Preencha todas as informa√ß√µes solicitadas no formato JSON acima.
    3. A an√°lise deve ter 2 par√°grafos: o primeiro resumindo fatos, o segundo explorando implica√ß√µes.
    4. O prompt para imagem deve ser descritivo e art√≠stico em ingl√™s.
    
    Retorne APENAS o JSON, sem texto adicional antes ou depois.
    """
    
    try:
        logger.debug("Enviando requisi√ß√£o para API Gemini...")
        
        # Tentar diferentes modelos at√© encontrar um dispon√≠vel
        modelos_disponiveis = ['gemini-2.0-flash-exp', 'gemini-1.5-flash', 'gemini-1.5-pro']
        
        model = None
        response = None
        for nome_modelo in modelos_disponiveis:
            try:
                logger.debug(f"Tentando modelo: {nome_modelo}")
                model = genai.GenerativeModel(nome_modelo)
                
                response = model.generate_content(
                    contents=prompt_principal,
                    generation_config={'temperature': 0.5}
                )
                
                if response and response.text:
                    logger.info(f"‚úÖ Modelo {nome_modelo} funcionou!")
                    break
            except Exception as e:
                logger.warning(f"Modelo {nome_modelo} n√£o dispon√≠vel: {e}")
                continue
        
        if not response or not response.text:
            raise ValueError("Nenhum modelo dispon√≠vel funcionou")
        
        # Parsear a resposta JSON
        import json
        
        # Tentar extrair JSON da resposta
        texto = response.text.strip()
        inicio = texto.find('{')
        fim = texto.rfind('}') + 1
        
        if inicio >= 0 and fim > inicio:
            json_str = texto[inicio:fim]
            briefing_dict = json.loads(json_str)
        else:
            briefing_dict = json.loads(texto)
        
        briefing = BriefingDeNoticias(**briefing_dict)
        logger.info("Briefing estruturado com sucesso")
        logger.debug(f"Encontrados {len(briefing.artigos)} artigos")
        return briefing

    except AttributeError as e:
        logger.error(f"Erro ao acessar atributos da resposta: {e}")
        return None
    except ValueError as e:
        logger.error(f"Erro de valida√ß√£o nos dados retornados: {e}")
        return None
    except Exception as e:
        logger.error(f"Erro inesperado ao gerar o briefing: {e}", exc_info=True)
        return None


def gerar_imagem_do_briefing(briefing: Optional[BriefingDeNoticias]) -> None:
    """
    Usa o prompt gerado no briefing para criar uma imagem com o modelo Imagen.
    
    Args:
        briefing: Objeto BriefingDeNoticias com o prompt de imagem
    
    Returns:
        None
    
    Raises:
        IOError: Se houver erro ao salvar a imagem
    """
    if not briefing:
        logger.warning("Briefing ausente. N√£o √© poss√≠vel gerar imagem.")
        return
    
    if not briefing.prompt_para_imagem:
        logger.warning("Prompt de imagem ausente no briefing.")
        return

    logger.info(f"Gerando imagem com o prompt: '{briefing.prompt_para_imagem[:50]}...'")
    
    try:
        # Nota: A API ImageGenerationModel n√£o est√° dispon√≠vel na vers√£o atual
        # Esta funcionalidade ser√° implementada quando a API Imagen estiver dispon√≠vel
        logger.warning("‚ö†Ô∏è  Gera√ß√£o de imagem temporariamente desabilitada.")
        logger.info(f"üìù Prompt para imagem: {briefing.prompt_para_imagem}")
        logger.info("üí° Voc√™ pode usar este prompt em ferramentas como DALL-E, Midjourney ou Stable Diffusion.")
        
        return
        
        # C√≥digo original comentado para refer√™ncia futura:
        # imagen = genai.ImageGenerationModel('imagen-3.0-generate-001')
        # result = imagen.generate_images(
        #     prompt=briefing.prompt_para_imagem,
        #     number_of_images=1,
        #     aspect_ratio="16:9",
        # )
        # imagem_bytes = result.images[0]._pil_image
        # nome_arquivo = f"briefing_{briefing.topico_central.replace(' ', '_').lower()}.png"
        # output_dir = os.getenv('OUTPUT_DIR', '.')
        # if output_dir != '.' and not os.path.exists(output_dir):
        #     os.makedirs(output_dir)
        #     logger.info(f"Diret√≥rio {output_dir} criado")
        # caminho_completo = os.path.join(output_dir, nome_arquivo)
        # imagem_bytes.save(caminho_completo)
        # logger.info(f"Imagem salva como '{caminho_completo}'")

    except AttributeError as e:
        logger.error(f"Erro ao acessar dados da imagem: {e}")
    except IOError as e:
        logger.error(f"Erro ao salvar imagem: {e}")
    except Exception as e:
        logger.error(f"Erro inesperado ao gerar a imagem: {e}", exc_info=True)


# --- Execu√ß√£o do Pipeline ---
if __name__ == "__main__":
    # Configurar n√≠vel de log via vari√°vel de ambiente
    log_level = os.getenv('LOG_LEVEL', 'INFO')
    logging.getLogger().setLevel(getattr(logging, log_level))
    
    # T√≥pico pode ser fornecido via argumento ou vari√°vel de ambiente
    topico_env = os.getenv('TOPICO')
    topico = topico_env if topico_env else "lan√ßamento e recep√ß√£o do Apple Vision Pro"
    
    logger.info("="*70)
    logger.info("PIPELINE DE CONTE√öDO AUTOMATIZADO")
    logger.info("="*70)
    
    try:
        # Executa a parte de texto do pipeline
        meu_briefing = criar_briefing_avancado(topico)
        
        if meu_briefing:
            # Imprime o resultado do conte√∫do avan√ßado
            print("\n" + "="*50)
            print("üì∞ BRIEFING DE NOT√çCIAS AVAN√áADO üì∞")
            print("="*50)
            print(f"T√ìPICO: {meu_briefing.topico_central}\n")
            print("--- AN√ÅLISE SINTETIZADA ---")
            print(meu_briefing.analise_sintetizada)
            print("\n--- FONTES UTILIZADAS ---")
            for i, art in enumerate(meu_briefing.artigos, 1):
                print(f"{i}. {art.titulo} ({art.fonte})")
            print("="*50 + "\n")

            # Executa a parte visual do pipeline
            gerar_imagem_do_briefing(meu_briefing)
            
            logger.info("Pipeline executado com sucesso!")
        else:
            logger.error("Falha ao criar briefing")
    
    except KeyboardInterrupt:
        logger.info("Execu√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        logger.error(f"Erro fatal na execu√ß√£o: {e}", exc_info=True)
