#!/usr/bin/env python3
"""
Script de Setup para CriarNoticia
================================

Este script automatiza a configura√ß√£o inicial do projeto.
"""

import os
import shutil
import sys

def criar_arquivo_env():
    """Cria o arquivo .env se n√£o existir."""
    if os.path.exists('.env'):
        print("‚ö†Ô∏è  Arquivo .env j√° existe. Pulando cria√ß√£o.")
        return False
    
    if not os.path.exists('config.env.example'):
        print("‚ùå Arquivo config.env.example n√£o encontrado!")
        return False
    
    shutil.copy('config.env.example', '.env')
    print("‚úÖ Arquivo .env criado com sucesso!")
    print("üìù Edite o arquivo .env e adicione sua API key do Google AI Studio")
    print("   Obtenha em: https://aistudio.google.com/app/apikey")
    return True

def verificar_dependencias():
    """Verifica se as depend√™ncias est√£o instaladas."""
    dependencias = {
        'google.generativeai': 'google-generativeai',
        'pydantic': 'pydantic',
        'dotenv': 'python-dotenv'
    }
    
    faltando = []
    for modulo, pacote in dependencias.items():
        try:
            __import__(modulo)
            print(f"‚úÖ {pacote} instalado")
        except ImportError:
            print(f"‚ùå {pacote} n√£o encontrado")
            faltando.append(pacote)
    
    if faltando:
        print("\n‚ö†Ô∏è  Depend√™ncias faltando. Instale com:")
        print(f"   pip install {' '.join(faltando)}")
        return False
    
    return True

def criar_diretorios():
    """Cria diret√≥rios necess√°rios."""
    diretorios = ['output', 'tests']
    
    for diretorio in diretorios:
        if not os.path.exists(diretorio):
            os.makedirs(diretorio)
            print(f"‚úÖ Diret√≥rio '{diretorio}/' criado")
        else:
            print(f"‚ö†Ô∏è  Diret√≥rio '{diretorio}/' j√° existe")

def main():
    """Fun√ß√£o principal do setup."""
    print("="*70)
    print("SETUP - CriarNoticia")
    print("="*70)
    print()
    
    print("1Ô∏è‚É£  Verificando depend√™ncias...")
    if not verificar_dependencias():
        print("\n‚ùå Instale as depend√™ncias antes de continuar:")
        print("   pip install -r requirements.txt")
        sys.exit(1)
    
    print("\n2Ô∏è‚É£  Criando arquivo de configura√ß√£o...")
    arquivo_criado = criar_arquivo_env()
    
    print("\n3Ô∏è‚É£  Criando diret√≥rios...")
    criar_diretorios()
    
    print("\n" + "="*70)
    print("‚úÖ SETUP CONCLU√çDO!")
    print("="*70)
    
    if arquivo_criado:
        print("\nüìù PR√ìXIMOS PASSOS:")
        print("   1. Edite o arquivo .env e adicione sua API key")
        print("   2. Execute: python criar_briefing_noticias.py")
    else:
        print("\n‚úÖ Projeto j√° configurado. Execute:")
        print("   python criar_briefing_noticias.py")
    
    print()

if __name__ == "__main__":
    main()
